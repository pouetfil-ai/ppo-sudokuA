// Script de test de la fonction crayon
const puppeteer = require('puppeteer');

async function testCrayonFunction() {
    console.log('üß™ Test de la fonction crayon...');
    
    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
    const page = await browser.newPage();
    
    try {
        // Naviguer vers l'application
        await page.goto('http://localhost:8000');
        
        // D√©marrer une partie
        await page.click('#start-game');
        
        // Attendre le chargement du jeu
        await page.waitForSelector('#sudoku-board', { timeout: 5000 });
        
        console.log('‚úÖ Application charg√©e');
        
        // Activer l'affichage des candidats
        await page.click('#hints-indicator');
        
        // S√©lectionner une cellule vide avec des candidats (essayons la premi√®re cellule du haut)
        await page.evaluate(() => {
            const cells = document.querySelectorAll('.cell');
            for (let cell of cells) {
                if (!cell.classList.contains('fixed') && !cell.textContent.trim()) {
                    cell.click();
                    return;
                }
            }
        });
        
        // V√©rifier qu'une cellule est s√©lectionn√©e
        const selectedCell = await page.$('.cell.selected');
        if (!selectedCell) {
            throw new Error('Aucune cellule s√©lectionn√©e');
        }
        console.log('‚úÖ Cellule vide s√©lectionn√©e');
        
        // V√©rifier que des candidats sont affich√©s
        const hintsBefore = await page.$$('.hints');
        console.log(`üìä Candidats affich√©s avant masquage: ${hintsBefore.length}`);
        
        // Activer le mode crayon
        await page.click('#mask-hint');
        
        // V√©rifier que le bouton crayon est actif
        const isMaskActive = await page.evaluate(() => {
            return document.getElementById('mask-hint').classList.contains('active');
        });
        
        if (!isMaskActive) {
            throw new Error('Le bouton crayon n\'est pas actif');
        }
        console.log('‚úÖ Mode crayon activ√©');
        
        // Cliquer sur un candidat dans le pad num√©rique (par exemple le chiffre 1)
        await page.click('.number-pad-button:nth-child(1)');
        
        // Attendre un petit moment pour la mise √† jour
        await page.waitForTimeout(100);
        
        // V√©rifier que le mode crayon se d√©sactive apr√®s utilisation
        const isMaskStillActive = await page.evaluate(() => {
            return document.getElementById('mask-hint').classList.contains('active');
        });
        
        if (isMaskStillActive) {
            console.log('‚ö†Ô∏è Le mode crayon reste actif (comportement attendu selon le code)');
        } else {
            console.log('‚úÖ Mode crayon d√©sactiv√© automatiquement');
        }
        
        // Activer √† nouveau le mode crayon pour r√©essayer
        await page.click('#mask-hint');
        
        // S√©lectionner la m√™me cellule et v√©rifier l'√©tat du candidat
        const hintsAfter = await page.$$('.hints');
        console.log(`üìä Candidats affich√©s apr√®s masquage: ${hintsAfter.length}`);
        
        console.log('‚úÖ Test termin√© avec succ√®s - La fonction crayon fonctionne !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        throw error;
    } finally {
        await browser.close();
    }
}

testCrayonFunction().catch(console.error);
